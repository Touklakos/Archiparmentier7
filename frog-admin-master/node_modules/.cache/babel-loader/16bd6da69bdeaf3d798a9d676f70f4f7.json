{"remainingRequest":"C:\\Users\\Jack Goodenough\\Documents\\ARCHI\\Archiparmentier7\\frog-admin-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Jack Goodenough\\Documents\\ARCHI\\Archiparmentier7\\frog-admin-master\\src\\store\\modules\\permission.js","dependencies":[{"path":"C:\\Users\\Jack Goodenough\\Documents\\ARCHI\\Archiparmentier7\\frog-admin-master\\src\\store\\modules\\permission.js","mtime":1585055118303},{"path":"C:\\Users\\Jack Goodenough\\Documents\\ARCHI\\Archiparmentier7\\frog-admin-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Jack Goodenough\\Documents\\ARCHI\\Archiparmentier7\\frog-admin-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"C:\\\\Users\\\\Jack Goodenough\\\\Documents\\\\ARCHI\\\\Archiparmentier7\\\\frog-admin-master\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport router, { cleanRouter, fullRouter } from '@/router';\nimport fullRoutes from '@/router/fullRoutes';\nvar roleMap = {\n  root: -1,\n  admin: 0,\n  user: 2\n};\nvar permission = {\n  state: {\n    role: \"root\",\n    permittedRoutes: fullRoutes\n  },\n  mutations: {\n    prepareRoutes: function prepareRoutes(state) {\n      state.permittedRoutes = filterAsyncRoutes(fullRouter, state.role);\n    },\n    switchRole: function switchRole(state, r) {\n      state.role = r;\n    }\n  },\n  actions: {\n    UPDATE_ROUTES: function UPDATE_ROUTES(_ref) {\n      var commit = _ref.commit,\n          state = _ref.state;\n      cleanRouter(router);\n      commit('prepareRoutes');\n      router.addRoutes(state.permittedRoutes);\n      return router;\n    }\n  }\n};\n\nfunction hasPermission(route, role) {\n  if (route.meta && route.meta.role) {\n    return roleMap[route.meta.role] >= roleMap[role];\n  } else {\n    return true;\n  }\n}\n\nfunction filterAsyncRoutes(routes, role) {\n  var temp = _toConsumableArray(routes);\n\n  return temp.filter(function (route) {\n    if (hasPermission(route, role)) {\n      if (route['children']) {\n        filterAsyncRoutes(route['children']);\n      }\n\n      return true;\n    }\n\n    return false;\n  });\n}\n\nexport default permission;",{"version":3,"sources":["C:/Users/Jack Goodenough/Documents/ARCHI/Archiparmentier7/frog-admin-master/src/store/modules/permission.js"],"names":["router","cleanRouter","fullRouter","fullRoutes","roleMap","root","admin","user","permission","state","role","permittedRoutes","mutations","prepareRoutes","filterAsyncRoutes","switchRole","r","actions","UPDATE_ROUTES","commit","addRoutes","hasPermission","route","meta","routes","temp","filter"],"mappings":";AAAA,OAAOA,MAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,QAA8C,UAA9C;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,IAAMC,OAAO,GAAG;AACfC,EAAAA,IAAI,EAAE,CAAC,CADQ;AAEfC,EAAAA,KAAK,EAAE,CAFQ;AAGfC,EAAAA,IAAI,EAAE;AAHS,CAAhB;AAMA,IAAMC,UAAU,GAAG;AAClBC,EAAAA,KAAK,EAAE;AACNC,IAAAA,IAAI,EAAE,MADA;AAENC,IAAAA,eAAe,EAAER;AAFX,GADW;AAKlBS,EAAAA,SAAS,EAAE;AACVC,IAAAA,aAAa,EAAE,uBAAAJ,KAAK,EAAI;AACvBA,MAAAA,KAAK,CAACE,eAAN,GAAwBG,iBAAiB,CAACZ,UAAD,EAAaO,KAAK,CAACC,IAAnB,CAAzC;AACA,KAHS;AAKVK,IAAAA,UAAU,EAAE,oBAACN,KAAD,EAAQO,CAAR,EAAc;AACzBP,MAAAA,KAAK,CAACC,IAAN,GAAaM,CAAb;AACA;AAPS,GALO;AAclBC,EAAAA,OAAO,EAAE;AACRC,IAAAA,aAAa,EAAE,6BAAqB;AAAA,UAAnBC,MAAmB,QAAnBA,MAAmB;AAAA,UAAXV,KAAW,QAAXA,KAAW;AACnCR,MAAAA,WAAW,CAACD,MAAD,CAAX;AACAmB,MAAAA,MAAM,CAAC,eAAD,CAAN;AACAnB,MAAAA,MAAM,CAACoB,SAAP,CAAiBX,KAAK,CAACE,eAAvB;AACA,aAAOX,MAAP;AACA;AANO;AAdS,CAAnB;;AAwBA,SAASqB,aAAT,CAAuBC,KAAvB,EAA8BZ,IAA9B,EAAoC;AACnC,MAAIY,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACC,IAAN,CAAWb,IAA7B,EAAmC;AAClC,WAAON,OAAO,CAACkB,KAAK,CAACC,IAAN,CAAWb,IAAZ,CAAP,IAA4BN,OAAO,CAACM,IAAD,CAA1C;AACA,GAFD,MAEO;AACN,WAAO,IAAP;AACA;AACD;;AAED,SAASI,iBAAT,CAA2BU,MAA3B,EAAmCd,IAAnC,EAAyC;AACxC,MAAIe,IAAI,sBAAOD,MAAP,CAAR;;AACA,SAAOC,IAAI,CAACC,MAAL,CAAY,UAAAJ,KAAK,EAAI;AAC3B,QAAID,aAAa,CAACC,KAAD,EAAQZ,IAAR,CAAjB,EAAgC;AAC/B,UAAIY,KAAK,CAAC,UAAD,CAAT,EAAuB;AACtBR,QAAAA,iBAAiB,CAACQ,KAAK,CAAC,UAAD,CAAN,CAAjB;AACA;;AACD,aAAO,IAAP;AACA;;AACD,WAAO,KAAP;AACA,GARM,CAAP;AASA;;AAGD,eAAed,UAAf","sourcesContent":["import router, {cleanRouter, fullRouter} from '@/router'\r\nimport fullRoutes from '@/router/fullRoutes'\r\n\r\nconst roleMap = {\r\n\troot: -1,\r\n\tadmin: 0,\r\n\tuser: 2,\r\n};\r\n\r\nconst permission = {\r\n\tstate: {\r\n\t\trole: \"root\",\r\n\t\tpermittedRoutes: fullRoutes,\r\n\t},\r\n\tmutations: {\r\n\t\tprepareRoutes: state => {\r\n\t\t\tstate.permittedRoutes = filterAsyncRoutes(fullRouter, state.role);\r\n\t\t},\r\n\r\n\t\tswitchRole: (state, r) => {\r\n\t\t\tstate.role = r;\r\n\t\t}\r\n\t},\r\n\tactions: {\r\n\t\tUPDATE_ROUTES: ({commit, state}) => {\r\n\t\t\tcleanRouter(router);\r\n\t\t\tcommit('prepareRoutes');\r\n\t\t\trouter.addRoutes(state.permittedRoutes);\r\n\t\t\treturn router;\r\n\t\t},\r\n\t}\r\n};\r\n\r\nfunction hasPermission(route, role) {\r\n\tif (route.meta && route.meta.role) {\r\n\t\treturn roleMap[route.meta.role] >= roleMap[role];\r\n\t} else {\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\nfunction filterAsyncRoutes(routes, role) {\r\n\tlet temp = [...routes];\r\n\treturn temp.filter(route => {\r\n\t\tif (hasPermission(route, role)) {\r\n\t\t\tif (route['children']) {\r\n\t\t\t\tfilterAsyncRoutes(route['children'])\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t});\r\n}\r\n\r\n\r\nexport default permission;\r\n"]}]}